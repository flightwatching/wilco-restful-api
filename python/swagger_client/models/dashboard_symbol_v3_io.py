# coding: utf-8

"""
    WILCO API

    This  API allows you to pull and push data with your WILCO deployment [https://github.com/flightwatching/wilco-api](https://github.com/flightwatching/wilco-api) or on  [www.flightwatching.com](www.flightwatching.com).   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@flightwatching.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

import pprint
import re  # noqa: F401

import six

from swagger_client.models.dashboard_symbol_function_v3_io import DashboardSymbolFunctionV3IO  # noqa: F401,E501


class DashboardSymbolV3IO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_tag': 'bool',
        'functions': 'list[DashboardSymbolFunctionV3IO]',
        'id': 'str',
        'auto_fct_id': 'int',
        'svg': 'str',
        'name': 'str'
    }

    attribute_map = {
        'is_tag': 'isTag',
        'functions': 'functions',
        'id': 'id',
        'auto_fct_id': 'autoFctId',
        'svg': 'svg',
        'name': 'name'
    }

    def __init__(self, is_tag=None, functions=None, id=None, auto_fct_id=None, svg=None, name=None):  # noqa: E501
        """DashboardSymbolV3IO - a model defined in Swagger"""  # noqa: E501

        self._is_tag = None
        self._functions = None
        self._id = None
        self._auto_fct_id = None
        self._svg = None
        self._name = None
        self.discriminator = None

        if is_tag is not None:
            self.is_tag = is_tag
        if functions is not None:
            self.functions = functions
        if id is not None:
            self.id = id
        if auto_fct_id is not None:
            self.auto_fct_id = auto_fct_id
        if svg is not None:
            self.svg = svg
        if name is not None:
            self.name = name

    @property
    def is_tag(self):
        """Gets the is_tag of this DashboardSymbolV3IO.  # noqa: E501


        :return: The is_tag of this DashboardSymbolV3IO.  # noqa: E501
        :rtype: bool
        """
        return self._is_tag

    @is_tag.setter
    def is_tag(self, is_tag):
        """Sets the is_tag of this DashboardSymbolV3IO.


        :param is_tag: The is_tag of this DashboardSymbolV3IO.  # noqa: E501
        :type: bool
        """

        self._is_tag = is_tag

    @property
    def functions(self):
        """Gets the functions of this DashboardSymbolV3IO.  # noqa: E501


        :return: The functions of this DashboardSymbolV3IO.  # noqa: E501
        :rtype: list[DashboardSymbolFunctionV3IO]
        """
        return self._functions

    @functions.setter
    def functions(self, functions):
        """Sets the functions of this DashboardSymbolV3IO.


        :param functions: The functions of this DashboardSymbolV3IO.  # noqa: E501
        :type: list[DashboardSymbolFunctionV3IO]
        """

        self._functions = functions

    @property
    def id(self):
        """Gets the id of this DashboardSymbolV3IO.  # noqa: E501


        :return: The id of this DashboardSymbolV3IO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DashboardSymbolV3IO.


        :param id: The id of this DashboardSymbolV3IO.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def auto_fct_id(self):
        """Gets the auto_fct_id of this DashboardSymbolV3IO.  # noqa: E501


        :return: The auto_fct_id of this DashboardSymbolV3IO.  # noqa: E501
        :rtype: int
        """
        return self._auto_fct_id

    @auto_fct_id.setter
    def auto_fct_id(self, auto_fct_id):
        """Sets the auto_fct_id of this DashboardSymbolV3IO.


        :param auto_fct_id: The auto_fct_id of this DashboardSymbolV3IO.  # noqa: E501
        :type: int
        """

        self._auto_fct_id = auto_fct_id

    @property
    def svg(self):
        """Gets the svg of this DashboardSymbolV3IO.  # noqa: E501


        :return: The svg of this DashboardSymbolV3IO.  # noqa: E501
        :rtype: str
        """
        return self._svg

    @svg.setter
    def svg(self, svg):
        """Sets the svg of this DashboardSymbolV3IO.


        :param svg: The svg of this DashboardSymbolV3IO.  # noqa: E501
        :type: str
        """

        self._svg = svg

    @property
    def name(self):
        """Gets the name of this DashboardSymbolV3IO.  # noqa: E501


        :return: The name of this DashboardSymbolV3IO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DashboardSymbolV3IO.


        :param name: The name of this DashboardSymbolV3IO.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardSymbolV3IO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
