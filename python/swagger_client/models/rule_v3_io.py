# coding: utf-8

"""
    WILCO API

    This  API allows you to pull and push data with your WILCO deployment [https://github.com/flightwatching/wilco-api](https://github.com/flightwatching/wilco-api) or on  [www.flightwatching.com](www.flightwatching.com).   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@flightwatching.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

import pprint
import re  # noqa: F401

import six


class RuleV3IO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'db_id': 'int',
        'svg_elt': 'str',
        'order': 'int',
        'name': 'str',
        'formula': 'str',
        'auto_map': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'db_id': 'db_id',
        'svg_elt': 'svgElt',
        'order': 'order',
        'name': 'name',
        'formula': 'formula',
        'auto_map': 'autoMap'
    }

    def __init__(self, id=None, db_id=None, svg_elt=None, order=None, name=None, formula=None, auto_map=None):  # noqa: E501
        """RuleV3IO - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._db_id = None
        self._svg_elt = None
        self._order = None
        self._name = None
        self._formula = None
        self._auto_map = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if db_id is not None:
            self.db_id = db_id
        if svg_elt is not None:
            self.svg_elt = svg_elt
        if order is not None:
            self.order = order
        if name is not None:
            self.name = name
        if formula is not None:
            self.formula = formula
        if auto_map is not None:
            self.auto_map = auto_map

    @property
    def id(self):
        """Gets the id of this RuleV3IO.  # noqa: E501


        :return: The id of this RuleV3IO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RuleV3IO.


        :param id: The id of this RuleV3IO.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def db_id(self):
        """Gets the db_id of this RuleV3IO.  # noqa: E501


        :return: The db_id of this RuleV3IO.  # noqa: E501
        :rtype: int
        """
        return self._db_id

    @db_id.setter
    def db_id(self, db_id):
        """Sets the db_id of this RuleV3IO.


        :param db_id: The db_id of this RuleV3IO.  # noqa: E501
        :type: int
        """

        self._db_id = db_id

    @property
    def svg_elt(self):
        """Gets the svg_elt of this RuleV3IO.  # noqa: E501


        :return: The svg_elt of this RuleV3IO.  # noqa: E501
        :rtype: str
        """
        return self._svg_elt

    @svg_elt.setter
    def svg_elt(self, svg_elt):
        """Sets the svg_elt of this RuleV3IO.


        :param svg_elt: The svg_elt of this RuleV3IO.  # noqa: E501
        :type: str
        """

        self._svg_elt = svg_elt

    @property
    def order(self):
        """Gets the order of this RuleV3IO.  # noqa: E501


        :return: The order of this RuleV3IO.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this RuleV3IO.


        :param order: The order of this RuleV3IO.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def name(self):
        """Gets the name of this RuleV3IO.  # noqa: E501


        :return: The name of this RuleV3IO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RuleV3IO.


        :param name: The name of this RuleV3IO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def formula(self):
        """Gets the formula of this RuleV3IO.  # noqa: E501


        :return: The formula of this RuleV3IO.  # noqa: E501
        :rtype: str
        """
        return self._formula

    @formula.setter
    def formula(self, formula):
        """Sets the formula of this RuleV3IO.


        :param formula: The formula of this RuleV3IO.  # noqa: E501
        :type: str
        """

        self._formula = formula

    @property
    def auto_map(self):
        """Gets the auto_map of this RuleV3IO.  # noqa: E501


        :return: The auto_map of this RuleV3IO.  # noqa: E501
        :rtype: bool
        """
        return self._auto_map

    @auto_map.setter
    def auto_map(self, auto_map):
        """Sets the auto_map of this RuleV3IO.


        :param auto_map: The auto_map of this RuleV3IO.  # noqa: E501
        :type: bool
        """

        self._auto_map = auto_map

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuleV3IO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
