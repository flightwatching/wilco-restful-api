# coding: utf-8

"""
    WILCO API

    This  API allows you to pull and push data with your WILCO deployment [https://github.com/flightwatching/wilco-api](https://github.com/flightwatching/wilco-api) or on  [www.flightwatching.com](www.flightwatching.com).   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@flightwatching.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

import pprint
import re  # noqa: F401

import six

from swagger_client.models.map import Map  # noqa: F401,E501


class ExtSource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'var_name': 'str',
        'pool_period_second': 'int',
        'url_template': 'str',
        'webhook': 'str',
        'headers': 'Map',
        'password': 'str',
        'method': 'str',
        'login': 'str',
        'body_template': 'str'
    }

    attribute_map = {
        'var_name': 'varName',
        'pool_period_second': 'poolPeriodSecond',
        'url_template': 'urlTemplate',
        'webhook': 'webhook',
        'headers': 'headers',
        'password': 'password',
        'method': 'method',
        'login': 'login',
        'body_template': 'bodyTemplate'
    }

    def __init__(self, var_name=None, pool_period_second=None, url_template=None, webhook=None, headers=None, password=None, method=None, login=None, body_template=None):  # noqa: E501
        """ExtSource - a model defined in Swagger"""  # noqa: E501

        self._var_name = None
        self._pool_period_second = None
        self._url_template = None
        self._webhook = None
        self._headers = None
        self._password = None
        self._method = None
        self._login = None
        self._body_template = None
        self.discriminator = None

        if var_name is not None:
            self.var_name = var_name
        if pool_period_second is not None:
            self.pool_period_second = pool_period_second
        if url_template is not None:
            self.url_template = url_template
        if webhook is not None:
            self.webhook = webhook
        if headers is not None:
            self.headers = headers
        if password is not None:
            self.password = password
        if method is not None:
            self.method = method
        if login is not None:
            self.login = login
        if body_template is not None:
            self.body_template = body_template

    @property
    def var_name(self):
        """Gets the var_name of this ExtSource.  # noqa: E501


        :return: The var_name of this ExtSource.  # noqa: E501
        :rtype: str
        """
        return self._var_name

    @var_name.setter
    def var_name(self, var_name):
        """Sets the var_name of this ExtSource.


        :param var_name: The var_name of this ExtSource.  # noqa: E501
        :type: str
        """

        self._var_name = var_name

    @property
    def pool_period_second(self):
        """Gets the pool_period_second of this ExtSource.  # noqa: E501


        :return: The pool_period_second of this ExtSource.  # noqa: E501
        :rtype: int
        """
        return self._pool_period_second

    @pool_period_second.setter
    def pool_period_second(self, pool_period_second):
        """Sets the pool_period_second of this ExtSource.


        :param pool_period_second: The pool_period_second of this ExtSource.  # noqa: E501
        :type: int
        """

        self._pool_period_second = pool_period_second

    @property
    def url_template(self):
        """Gets the url_template of this ExtSource.  # noqa: E501


        :return: The url_template of this ExtSource.  # noqa: E501
        :rtype: str
        """
        return self._url_template

    @url_template.setter
    def url_template(self, url_template):
        """Sets the url_template of this ExtSource.


        :param url_template: The url_template of this ExtSource.  # noqa: E501
        :type: str
        """

        self._url_template = url_template

    @property
    def webhook(self):
        """Gets the webhook of this ExtSource.  # noqa: E501


        :return: The webhook of this ExtSource.  # noqa: E501
        :rtype: str
        """
        return self._webhook

    @webhook.setter
    def webhook(self, webhook):
        """Sets the webhook of this ExtSource.


        :param webhook: The webhook of this ExtSource.  # noqa: E501
        :type: str
        """

        self._webhook = webhook

    @property
    def headers(self):
        """Gets the headers of this ExtSource.  # noqa: E501


        :return: The headers of this ExtSource.  # noqa: E501
        :rtype: Map
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this ExtSource.


        :param headers: The headers of this ExtSource.  # noqa: E501
        :type: Map
        """

        self._headers = headers

    @property
    def password(self):
        """Gets the password of this ExtSource.  # noqa: E501


        :return: The password of this ExtSource.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ExtSource.


        :param password: The password of this ExtSource.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def method(self):
        """Gets the method of this ExtSource.  # noqa: E501


        :return: The method of this ExtSource.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this ExtSource.


        :param method: The method of this ExtSource.  # noqa: E501
        :type: str
        """
        allowed_values = ["GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH", "TRACE", "HEAD"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"  # noqa: E501
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def login(self):
        """Gets the login of this ExtSource.  # noqa: E501


        :return: The login of this ExtSource.  # noqa: E501
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this ExtSource.


        :param login: The login of this ExtSource.  # noqa: E501
        :type: str
        """

        self._login = login

    @property
    def body_template(self):
        """Gets the body_template of this ExtSource.  # noqa: E501


        :return: The body_template of this ExtSource.  # noqa: E501
        :rtype: str
        """
        return self._body_template

    @body_template.setter
    def body_template(self, body_template):
        """Sets the body_template of this ExtSource.


        :param body_template: The body_template of this ExtSource.  # noqa: E501
        :type: str
        """

        self._body_template = body_template

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExtSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
