# coding: utf-8

"""
    WILCO API

    This  API allows you to pull and push data with your WILCO deployment [https://github.com/flightwatching/wilco-api](https://github.com/flightwatching/wilco-api) or on  [www.flightwatching.com](www.flightwatching.com).   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@flightwatching.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

import pprint
import re  # noqa: F401

import six

from swagger_client.models.event_v3_io import EventV3IO  # noqa: F401,E501
from swagger_client.models.map import Map  # noqa: F401,E501


class FwotV3IO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'alt': 'float',
        'eta': 'str',
        'category': 'str',
        'photo_url': 'str',
        '_from': 'str',
        'to': 'str',
        'cool_name': 'str',
        'lon': 'float',
        'etd': 'str',
        'pos_date': 'str',
        'reg': 'str',
        'status_dashboard': 'int',
        'type': 'str',
        'ext_url': 'str',
        'alert': 'EventV3IO',
        'lat': 'float',
        'properties': 'Map'
    }

    attribute_map = {
        'status': 'status',
        'alt': 'alt',
        'eta': 'eta',
        'category': 'category',
        'photo_url': 'photoUrl',
        '_from': 'from',
        'to': 'to',
        'cool_name': 'coolName',
        'lon': 'lon',
        'etd': 'etd',
        'pos_date': 'posDate',
        'reg': 'reg',
        'status_dashboard': 'statusDashboard',
        'type': 'type',
        'ext_url': 'extUrl',
        'alert': 'alert',
        'lat': 'lat',
        'properties': 'properties'
    }

    def __init__(self, status=None, alt=None, eta=None, category=None, photo_url=None, _from=None, to=None, cool_name=None, lon=None, etd=None, pos_date=None, reg=None, status_dashboard=None, type=None, ext_url=None, alert=None, lat=None, properties=None):  # noqa: E501
        """FwotV3IO - a model defined in Swagger"""  # noqa: E501

        self._status = None
        self._alt = None
        self._eta = None
        self._category = None
        self._photo_url = None
        self.__from = None
        self._to = None
        self._cool_name = None
        self._lon = None
        self._etd = None
        self._pos_date = None
        self._reg = None
        self._status_dashboard = None
        self._type = None
        self._ext_url = None
        self._alert = None
        self._lat = None
        self._properties = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if alt is not None:
            self.alt = alt
        if eta is not None:
            self.eta = eta
        if category is not None:
            self.category = category
        if photo_url is not None:
            self.photo_url = photo_url
        if _from is not None:
            self._from = _from
        if to is not None:
            self.to = to
        if cool_name is not None:
            self.cool_name = cool_name
        if lon is not None:
            self.lon = lon
        if etd is not None:
            self.etd = etd
        if pos_date is not None:
            self.pos_date = pos_date
        if reg is not None:
            self.reg = reg
        if status_dashboard is not None:
            self.status_dashboard = status_dashboard
        if type is not None:
            self.type = type
        if ext_url is not None:
            self.ext_url = ext_url
        if alert is not None:
            self.alert = alert
        if lat is not None:
            self.lat = lat
        if properties is not None:
            self.properties = properties

    @property
    def status(self):
        """Gets the status of this FwotV3IO.  # noqa: E501


        :return: The status of this FwotV3IO.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FwotV3IO.


        :param status: The status of this FwotV3IO.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def alt(self):
        """Gets the alt of this FwotV3IO.  # noqa: E501


        :return: The alt of this FwotV3IO.  # noqa: E501
        :rtype: float
        """
        return self._alt

    @alt.setter
    def alt(self, alt):
        """Sets the alt of this FwotV3IO.


        :param alt: The alt of this FwotV3IO.  # noqa: E501
        :type: float
        """

        self._alt = alt

    @property
    def eta(self):
        """Gets the eta of this FwotV3IO.  # noqa: E501


        :return: The eta of this FwotV3IO.  # noqa: E501
        :rtype: str
        """
        return self._eta

    @eta.setter
    def eta(self, eta):
        """Sets the eta of this FwotV3IO.


        :param eta: The eta of this FwotV3IO.  # noqa: E501
        :type: str
        """

        self._eta = eta

    @property
    def category(self):
        """Gets the category of this FwotV3IO.  # noqa: E501


        :return: The category of this FwotV3IO.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this FwotV3IO.


        :param category: The category of this FwotV3IO.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def photo_url(self):
        """Gets the photo_url of this FwotV3IO.  # noqa: E501


        :return: The photo_url of this FwotV3IO.  # noqa: E501
        :rtype: str
        """
        return self._photo_url

    @photo_url.setter
    def photo_url(self, photo_url):
        """Sets the photo_url of this FwotV3IO.


        :param photo_url: The photo_url of this FwotV3IO.  # noqa: E501
        :type: str
        """

        self._photo_url = photo_url

    @property
    def _from(self):
        """Gets the _from of this FwotV3IO.  # noqa: E501


        :return: The _from of this FwotV3IO.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this FwotV3IO.


        :param _from: The _from of this FwotV3IO.  # noqa: E501
        :type: str
        """

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this FwotV3IO.  # noqa: E501


        :return: The to of this FwotV3IO.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this FwotV3IO.


        :param to: The to of this FwotV3IO.  # noqa: E501
        :type: str
        """

        self._to = to

    @property
    def cool_name(self):
        """Gets the cool_name of this FwotV3IO.  # noqa: E501


        :return: The cool_name of this FwotV3IO.  # noqa: E501
        :rtype: str
        """
        return self._cool_name

    @cool_name.setter
    def cool_name(self, cool_name):
        """Sets the cool_name of this FwotV3IO.


        :param cool_name: The cool_name of this FwotV3IO.  # noqa: E501
        :type: str
        """

        self._cool_name = cool_name

    @property
    def lon(self):
        """Gets the lon of this FwotV3IO.  # noqa: E501


        :return: The lon of this FwotV3IO.  # noqa: E501
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this FwotV3IO.


        :param lon: The lon of this FwotV3IO.  # noqa: E501
        :type: float
        """

        self._lon = lon

    @property
    def etd(self):
        """Gets the etd of this FwotV3IO.  # noqa: E501


        :return: The etd of this FwotV3IO.  # noqa: E501
        :rtype: str
        """
        return self._etd

    @etd.setter
    def etd(self, etd):
        """Sets the etd of this FwotV3IO.


        :param etd: The etd of this FwotV3IO.  # noqa: E501
        :type: str
        """

        self._etd = etd

    @property
    def pos_date(self):
        """Gets the pos_date of this FwotV3IO.  # noqa: E501


        :return: The pos_date of this FwotV3IO.  # noqa: E501
        :rtype: str
        """
        return self._pos_date

    @pos_date.setter
    def pos_date(self, pos_date):
        """Sets the pos_date of this FwotV3IO.


        :param pos_date: The pos_date of this FwotV3IO.  # noqa: E501
        :type: str
        """

        self._pos_date = pos_date

    @property
    def reg(self):
        """Gets the reg of this FwotV3IO.  # noqa: E501


        :return: The reg of this FwotV3IO.  # noqa: E501
        :rtype: str
        """
        return self._reg

    @reg.setter
    def reg(self, reg):
        """Sets the reg of this FwotV3IO.


        :param reg: The reg of this FwotV3IO.  # noqa: E501
        :type: str
        """

        self._reg = reg

    @property
    def status_dashboard(self):
        """Gets the status_dashboard of this FwotV3IO.  # noqa: E501


        :return: The status_dashboard of this FwotV3IO.  # noqa: E501
        :rtype: int
        """
        return self._status_dashboard

    @status_dashboard.setter
    def status_dashboard(self, status_dashboard):
        """Sets the status_dashboard of this FwotV3IO.


        :param status_dashboard: The status_dashboard of this FwotV3IO.  # noqa: E501
        :type: int
        """

        self._status_dashboard = status_dashboard

    @property
    def type(self):
        """Gets the type of this FwotV3IO.  # noqa: E501


        :return: The type of this FwotV3IO.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FwotV3IO.


        :param type: The type of this FwotV3IO.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def ext_url(self):
        """Gets the ext_url of this FwotV3IO.  # noqa: E501


        :return: The ext_url of this FwotV3IO.  # noqa: E501
        :rtype: str
        """
        return self._ext_url

    @ext_url.setter
    def ext_url(self, ext_url):
        """Sets the ext_url of this FwotV3IO.


        :param ext_url: The ext_url of this FwotV3IO.  # noqa: E501
        :type: str
        """

        self._ext_url = ext_url

    @property
    def alert(self):
        """Gets the alert of this FwotV3IO.  # noqa: E501


        :return: The alert of this FwotV3IO.  # noqa: E501
        :rtype: EventV3IO
        """
        return self._alert

    @alert.setter
    def alert(self, alert):
        """Sets the alert of this FwotV3IO.


        :param alert: The alert of this FwotV3IO.  # noqa: E501
        :type: EventV3IO
        """

        self._alert = alert

    @property
    def lat(self):
        """Gets the lat of this FwotV3IO.  # noqa: E501


        :return: The lat of this FwotV3IO.  # noqa: E501
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this FwotV3IO.


        :param lat: The lat of this FwotV3IO.  # noqa: E501
        :type: float
        """

        self._lat = lat

    @property
    def properties(self):
        """Gets the properties of this FwotV3IO.  # noqa: E501


        :return: The properties of this FwotV3IO.  # noqa: E501
        :rtype: Map
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this FwotV3IO.


        :param properties: The properties of this FwotV3IO.  # noqa: E501
        :type: Map
        """

        self._properties = properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FwotV3IO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
