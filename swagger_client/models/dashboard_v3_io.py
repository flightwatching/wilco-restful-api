# coding: utf-8

"""
    WILCO API

    This  API allows you to pull and push data with your WILCO deployment [https://github.com/flightwatching/wilco-api](https://github.com/flightwatching/wilco-api) or on  [www.flightwatching.com](www.flightwatching.com).   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@flightwatching.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

import pprint
import re  # noqa: F401

import six

from swagger_client.models.dashboard_symbol_v3_io import DashboardSymbolV3IO  # noqa: F401,E501
from swagger_client.models.map import Map  # noqa: F401,E501
from swagger_client.models.rule_v3_io import RuleV3IO  # noqa: F401,E501


class DashboardV3IO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rules': 'list[RuleV3IO]',
        'name': 'str',
        'svg': 'str',
        'symbols': 'list[DashboardSymbolV3IO]',
        'elt_map': 'Map',
        'id': 'str'
    }

    attribute_map = {
        'rules': 'rules',
        'name': 'name',
        'svg': 'svg',
        'symbols': 'symbols',
        'elt_map': 'eltMap',
        'id': 'id'
    }

    def __init__(self, rules=None, name=None, svg=None, symbols=None, elt_map=None, id=None):  # noqa: E501
        """DashboardV3IO - a model defined in Swagger"""  # noqa: E501

        self._rules = None
        self._name = None
        self._svg = None
        self._symbols = None
        self._elt_map = None
        self._id = None
        self.discriminator = None

        if rules is not None:
            self.rules = rules
        if name is not None:
            self.name = name
        if svg is not None:
            self.svg = svg
        if symbols is not None:
            self.symbols = symbols
        if elt_map is not None:
            self.elt_map = elt_map
        if id is not None:
            self.id = id

    @property
    def rules(self):
        """Gets the rules of this DashboardV3IO.  # noqa: E501


        :return: The rules of this DashboardV3IO.  # noqa: E501
        :rtype: list[RuleV3IO]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this DashboardV3IO.


        :param rules: The rules of this DashboardV3IO.  # noqa: E501
        :type: list[RuleV3IO]
        """

        self._rules = rules

    @property
    def name(self):
        """Gets the name of this DashboardV3IO.  # noqa: E501


        :return: The name of this DashboardV3IO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DashboardV3IO.


        :param name: The name of this DashboardV3IO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def svg(self):
        """Gets the svg of this DashboardV3IO.  # noqa: E501


        :return: The svg of this DashboardV3IO.  # noqa: E501
        :rtype: str
        """
        return self._svg

    @svg.setter
    def svg(self, svg):
        """Sets the svg of this DashboardV3IO.


        :param svg: The svg of this DashboardV3IO.  # noqa: E501
        :type: str
        """

        self._svg = svg

    @property
    def symbols(self):
        """Gets the symbols of this DashboardV3IO.  # noqa: E501


        :return: The symbols of this DashboardV3IO.  # noqa: E501
        :rtype: list[DashboardSymbolV3IO]
        """
        return self._symbols

    @symbols.setter
    def symbols(self, symbols):
        """Sets the symbols of this DashboardV3IO.


        :param symbols: The symbols of this DashboardV3IO.  # noqa: E501
        :type: list[DashboardSymbolV3IO]
        """

        self._symbols = symbols

    @property
    def elt_map(self):
        """Gets the elt_map of this DashboardV3IO.  # noqa: E501


        :return: The elt_map of this DashboardV3IO.  # noqa: E501
        :rtype: Map
        """
        return self._elt_map

    @elt_map.setter
    def elt_map(self, elt_map):
        """Sets the elt_map of this DashboardV3IO.


        :param elt_map: The elt_map of this DashboardV3IO.  # noqa: E501
        :type: Map
        """

        self._elt_map = elt_map

    @property
    def id(self):
        """Gets the id of this DashboardV3IO.  # noqa: E501


        :return: The id of this DashboardV3IO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DashboardV3IO.


        :param id: The id of this DashboardV3IO.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardV3IO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
