# coding: utf-8

"""
    WILCO API

    This  API allows you to pull and push data with your WILCO deployment [https://github.com/flightwatching/wilco-api](https://github.com/flightwatching/wilco-api) or on  [www.flightwatching.com](www.flightwatching.com).   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@flightwatching.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

import pprint
import re  # noqa: F401

import six


class TrendBundleV3IO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'json_conf': 'str',
        'coolname': 'str'
    }

    attribute_map = {
        'id': 'id',
        'json_conf': 'jsonConf',
        'coolname': 'coolname'
    }

    def __init__(self, id=None, json_conf=None, coolname=None):  # noqa: E501
        """TrendBundleV3IO - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._json_conf = None
        self._coolname = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if json_conf is not None:
            self.json_conf = json_conf
        if coolname is not None:
            self.coolname = coolname

    @property
    def id(self):
        """Gets the id of this TrendBundleV3IO.  # noqa: E501


        :return: The id of this TrendBundleV3IO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TrendBundleV3IO.


        :param id: The id of this TrendBundleV3IO.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def json_conf(self):
        """Gets the json_conf of this TrendBundleV3IO.  # noqa: E501


        :return: The json_conf of this TrendBundleV3IO.  # noqa: E501
        :rtype: str
        """
        return self._json_conf

    @json_conf.setter
    def json_conf(self, json_conf):
        """Sets the json_conf of this TrendBundleV3IO.


        :param json_conf: The json_conf of this TrendBundleV3IO.  # noqa: E501
        :type: str
        """

        self._json_conf = json_conf

    @property
    def coolname(self):
        """Gets the coolname of this TrendBundleV3IO.  # noqa: E501


        :return: The coolname of this TrendBundleV3IO.  # noqa: E501
        :rtype: str
        """
        return self._coolname

    @coolname.setter
    def coolname(self, coolname):
        """Sets the coolname of this TrendBundleV3IO.


        :param coolname: The coolname of this TrendBundleV3IO.  # noqa: E501
        :type: str
        """

        self._coolname = coolname

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrendBundleV3IO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
