# coding: utf-8

"""
    WILCO API

    This  API allows you to pull and push data with your WILCO deployment [https://github.com/flightwatching/wilco-api](https://github.com/flightwatching/wilco-api) or on  [www.flightwatching.com](www.flightwatching.com).   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@flightwatching.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

import pprint
import re  # noqa: F401

import six

from swagger_client.models.fwot_v3_io import FwotV3IO  # noqa: F401,E501
from swagger_client.models.sample_v3_io import SampleV3IO  # noqa: F401,E501
from swagger_client.models.tag_v3_io import TagV3IO  # noqa: F401,E501


class EventV3IO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'to': 'str',
        'status': 'str',
        'reg': 'str',
        'computed_date': 'str',
        'fwot': 'FwotV3IO',
        'tags': 'list[TagV3IO]',
        'network': 'str',
        'id': 'str',
        'comment': 'str',
        'dashboard_ids': 'list[str]',
        'title': 'str',
        'data': 'str',
        'sharing_id': 'str',
        'station': 'str',
        'phase': 'str',
        'analysis': 'list[int]',
        'flight_count': 'int',
        'samples': 'list[SampleV3IO]',
        'visible': 'bool',
        'reception_date': 'str',
        'date_is_estimated': 'bool',
        'layout_id': 'int',
        'last_update': 'int',
        '_from': 'str',
        'style': 'str',
        'severity': 'str',
        'flight_id': 'str',
        'klass': 'str',
        'category': 'str',
        'data_id': 'str',
        'description': 'str',
        'dismisser': 'str',
        'transmission_date': 'str',
        'sum_up': 'str',
        'ext_url': 'str'
    }

    attribute_map = {
        'to': 'to',
        'status': 'status',
        'reg': 'reg',
        'computed_date': 'computedDate',
        'fwot': 'fwot',
        'tags': 'tags',
        'network': 'network',
        'id': 'id',
        'comment': 'comment',
        'dashboard_ids': 'dashboardIds',
        'title': 'title',
        'data': 'data',
        'sharing_id': 'sharingId',
        'station': 'station',
        'phase': 'phase',
        'analysis': 'analysis',
        'flight_count': 'flightCount',
        'samples': 'samples',
        'visible': 'visible',
        'reception_date': 'receptionDate',
        'date_is_estimated': 'dateIsEstimated',
        'layout_id': 'layoutId',
        'last_update': 'lastUpdate',
        '_from': 'from',
        'style': 'style',
        'severity': 'severity',
        'flight_id': 'flightId',
        'klass': 'klass',
        'category': 'category',
        'data_id': 'dataId',
        'description': 'description',
        'dismisser': 'dismisser',
        'transmission_date': 'transmissionDate',
        'sum_up': 'sumUp',
        'ext_url': 'extUrl'
    }

    def __init__(self, to=None, status=None, reg=None, computed_date=None, fwot=None, tags=None, network=None, id=None, comment=None, dashboard_ids=None, title=None, data=None, sharing_id=None, station=None, phase=None, analysis=None, flight_count=None, samples=None, visible=None, reception_date=None, date_is_estimated=None, layout_id=None, last_update=None, _from=None, style=None, severity=None, flight_id=None, klass=None, category=None, data_id=None, description=None, dismisser=None, transmission_date=None, sum_up=None, ext_url=None):  # noqa: E501
        """EventV3IO - a model defined in Swagger"""  # noqa: E501

        self._to = None
        self._status = None
        self._reg = None
        self._computed_date = None
        self._fwot = None
        self._tags = None
        self._network = None
        self._id = None
        self._comment = None
        self._dashboard_ids = None
        self._title = None
        self._data = None
        self._sharing_id = None
        self._station = None
        self._phase = None
        self._analysis = None
        self._flight_count = None
        self._samples = None
        self._visible = None
        self._reception_date = None
        self._date_is_estimated = None
        self._layout_id = None
        self._last_update = None
        self.__from = None
        self._style = None
        self._severity = None
        self._flight_id = None
        self._klass = None
        self._category = None
        self._data_id = None
        self._description = None
        self._dismisser = None
        self._transmission_date = None
        self._sum_up = None
        self._ext_url = None
        self.discriminator = None

        if to is not None:
            self.to = to
        if status is not None:
            self.status = status
        if reg is not None:
            self.reg = reg
        if computed_date is not None:
            self.computed_date = computed_date
        if fwot is not None:
            self.fwot = fwot
        if tags is not None:
            self.tags = tags
        if network is not None:
            self.network = network
        if id is not None:
            self.id = id
        if comment is not None:
            self.comment = comment
        if dashboard_ids is not None:
            self.dashboard_ids = dashboard_ids
        if title is not None:
            self.title = title
        if data is not None:
            self.data = data
        if sharing_id is not None:
            self.sharing_id = sharing_id
        if station is not None:
            self.station = station
        if phase is not None:
            self.phase = phase
        if analysis is not None:
            self.analysis = analysis
        if flight_count is not None:
            self.flight_count = flight_count
        if samples is not None:
            self.samples = samples
        if visible is not None:
            self.visible = visible
        if reception_date is not None:
            self.reception_date = reception_date
        if date_is_estimated is not None:
            self.date_is_estimated = date_is_estimated
        if layout_id is not None:
            self.layout_id = layout_id
        if last_update is not None:
            self.last_update = last_update
        if _from is not None:
            self._from = _from
        if style is not None:
            self.style = style
        if severity is not None:
            self.severity = severity
        if flight_id is not None:
            self.flight_id = flight_id
        if klass is not None:
            self.klass = klass
        if category is not None:
            self.category = category
        if data_id is not None:
            self.data_id = data_id
        if description is not None:
            self.description = description
        if dismisser is not None:
            self.dismisser = dismisser
        if transmission_date is not None:
            self.transmission_date = transmission_date
        if sum_up is not None:
            self.sum_up = sum_up
        if ext_url is not None:
            self.ext_url = ext_url

    @property
    def to(self):
        """Gets the to of this EventV3IO.  # noqa: E501


        :return: The to of this EventV3IO.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this EventV3IO.


        :param to: The to of this EventV3IO.  # noqa: E501
        :type: str
        """

        self._to = to

    @property
    def status(self):
        """Gets the status of this EventV3IO.  # noqa: E501


        :return: The status of this EventV3IO.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EventV3IO.


        :param status: The status of this EventV3IO.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def reg(self):
        """Gets the reg of this EventV3IO.  # noqa: E501


        :return: The reg of this EventV3IO.  # noqa: E501
        :rtype: str
        """
        return self._reg

    @reg.setter
    def reg(self, reg):
        """Sets the reg of this EventV3IO.


        :param reg: The reg of this EventV3IO.  # noqa: E501
        :type: str
        """

        self._reg = reg

    @property
    def computed_date(self):
        """Gets the computed_date of this EventV3IO.  # noqa: E501


        :return: The computed_date of this EventV3IO.  # noqa: E501
        :rtype: str
        """
        return self._computed_date

    @computed_date.setter
    def computed_date(self, computed_date):
        """Sets the computed_date of this EventV3IO.


        :param computed_date: The computed_date of this EventV3IO.  # noqa: E501
        :type: str
        """

        self._computed_date = computed_date

    @property
    def fwot(self):
        """Gets the fwot of this EventV3IO.  # noqa: E501


        :return: The fwot of this EventV3IO.  # noqa: E501
        :rtype: FwotV3IO
        """
        return self._fwot

    @fwot.setter
    def fwot(self, fwot):
        """Sets the fwot of this EventV3IO.


        :param fwot: The fwot of this EventV3IO.  # noqa: E501
        :type: FwotV3IO
        """

        self._fwot = fwot

    @property
    def tags(self):
        """Gets the tags of this EventV3IO.  # noqa: E501


        :return: The tags of this EventV3IO.  # noqa: E501
        :rtype: list[TagV3IO]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this EventV3IO.


        :param tags: The tags of this EventV3IO.  # noqa: E501
        :type: list[TagV3IO]
        """

        self._tags = tags

    @property
    def network(self):
        """Gets the network of this EventV3IO.  # noqa: E501


        :return: The network of this EventV3IO.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this EventV3IO.


        :param network: The network of this EventV3IO.  # noqa: E501
        :type: str
        """

        self._network = network

    @property
    def id(self):
        """Gets the id of this EventV3IO.  # noqa: E501


        :return: The id of this EventV3IO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventV3IO.


        :param id: The id of this EventV3IO.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def comment(self):
        """Gets the comment of this EventV3IO.  # noqa: E501


        :return: The comment of this EventV3IO.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this EventV3IO.


        :param comment: The comment of this EventV3IO.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def dashboard_ids(self):
        """Gets the dashboard_ids of this EventV3IO.  # noqa: E501


        :return: The dashboard_ids of this EventV3IO.  # noqa: E501
        :rtype: list[str]
        """
        return self._dashboard_ids

    @dashboard_ids.setter
    def dashboard_ids(self, dashboard_ids):
        """Sets the dashboard_ids of this EventV3IO.


        :param dashboard_ids: The dashboard_ids of this EventV3IO.  # noqa: E501
        :type: list[str]
        """

        self._dashboard_ids = dashboard_ids

    @property
    def title(self):
        """Gets the title of this EventV3IO.  # noqa: E501


        :return: The title of this EventV3IO.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this EventV3IO.


        :param title: The title of this EventV3IO.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def data(self):
        """Gets the data of this EventV3IO.  # noqa: E501


        :return: The data of this EventV3IO.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this EventV3IO.


        :param data: The data of this EventV3IO.  # noqa: E501
        :type: str
        """

        self._data = data

    @property
    def sharing_id(self):
        """Gets the sharing_id of this EventV3IO.  # noqa: E501


        :return: The sharing_id of this EventV3IO.  # noqa: E501
        :rtype: str
        """
        return self._sharing_id

    @sharing_id.setter
    def sharing_id(self, sharing_id):
        """Sets the sharing_id of this EventV3IO.


        :param sharing_id: The sharing_id of this EventV3IO.  # noqa: E501
        :type: str
        """

        self._sharing_id = sharing_id

    @property
    def station(self):
        """Gets the station of this EventV3IO.  # noqa: E501


        :return: The station of this EventV3IO.  # noqa: E501
        :rtype: str
        """
        return self._station

    @station.setter
    def station(self, station):
        """Sets the station of this EventV3IO.


        :param station: The station of this EventV3IO.  # noqa: E501
        :type: str
        """

        self._station = station

    @property
    def phase(self):
        """Gets the phase of this EventV3IO.  # noqa: E501


        :return: The phase of this EventV3IO.  # noqa: E501
        :rtype: str
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this EventV3IO.


        :param phase: The phase of this EventV3IO.  # noqa: E501
        :type: str
        """

        self._phase = phase

    @property
    def analysis(self):
        """Gets the analysis of this EventV3IO.  # noqa: E501


        :return: The analysis of this EventV3IO.  # noqa: E501
        :rtype: list[int]
        """
        return self._analysis

    @analysis.setter
    def analysis(self, analysis):
        """Sets the analysis of this EventV3IO.


        :param analysis: The analysis of this EventV3IO.  # noqa: E501
        :type: list[int]
        """

        self._analysis = analysis

    @property
    def flight_count(self):
        """Gets the flight_count of this EventV3IO.  # noqa: E501


        :return: The flight_count of this EventV3IO.  # noqa: E501
        :rtype: int
        """
        return self._flight_count

    @flight_count.setter
    def flight_count(self, flight_count):
        """Sets the flight_count of this EventV3IO.


        :param flight_count: The flight_count of this EventV3IO.  # noqa: E501
        :type: int
        """

        self._flight_count = flight_count

    @property
    def samples(self):
        """Gets the samples of this EventV3IO.  # noqa: E501


        :return: The samples of this EventV3IO.  # noqa: E501
        :rtype: list[SampleV3IO]
        """
        return self._samples

    @samples.setter
    def samples(self, samples):
        """Sets the samples of this EventV3IO.


        :param samples: The samples of this EventV3IO.  # noqa: E501
        :type: list[SampleV3IO]
        """

        self._samples = samples

    @property
    def visible(self):
        """Gets the visible of this EventV3IO.  # noqa: E501


        :return: The visible of this EventV3IO.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this EventV3IO.


        :param visible: The visible of this EventV3IO.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    @property
    def reception_date(self):
        """Gets the reception_date of this EventV3IO.  # noqa: E501


        :return: The reception_date of this EventV3IO.  # noqa: E501
        :rtype: str
        """
        return self._reception_date

    @reception_date.setter
    def reception_date(self, reception_date):
        """Sets the reception_date of this EventV3IO.


        :param reception_date: The reception_date of this EventV3IO.  # noqa: E501
        :type: str
        """

        self._reception_date = reception_date

    @property
    def date_is_estimated(self):
        """Gets the date_is_estimated of this EventV3IO.  # noqa: E501


        :return: The date_is_estimated of this EventV3IO.  # noqa: E501
        :rtype: bool
        """
        return self._date_is_estimated

    @date_is_estimated.setter
    def date_is_estimated(self, date_is_estimated):
        """Sets the date_is_estimated of this EventV3IO.


        :param date_is_estimated: The date_is_estimated of this EventV3IO.  # noqa: E501
        :type: bool
        """

        self._date_is_estimated = date_is_estimated

    @property
    def layout_id(self):
        """Gets the layout_id of this EventV3IO.  # noqa: E501


        :return: The layout_id of this EventV3IO.  # noqa: E501
        :rtype: int
        """
        return self._layout_id

    @layout_id.setter
    def layout_id(self, layout_id):
        """Sets the layout_id of this EventV3IO.


        :param layout_id: The layout_id of this EventV3IO.  # noqa: E501
        :type: int
        """

        self._layout_id = layout_id

    @property
    def last_update(self):
        """Gets the last_update of this EventV3IO.  # noqa: E501


        :return: The last_update of this EventV3IO.  # noqa: E501
        :rtype: int
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this EventV3IO.


        :param last_update: The last_update of this EventV3IO.  # noqa: E501
        :type: int
        """

        self._last_update = last_update

    @property
    def _from(self):
        """Gets the _from of this EventV3IO.  # noqa: E501


        :return: The _from of this EventV3IO.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this EventV3IO.


        :param _from: The _from of this EventV3IO.  # noqa: E501
        :type: str
        """

        self.__from = _from

    @property
    def style(self):
        """Gets the style of this EventV3IO.  # noqa: E501


        :return: The style of this EventV3IO.  # noqa: E501
        :rtype: str
        """
        return self._style

    @style.setter
    def style(self, style):
        """Sets the style of this EventV3IO.


        :param style: The style of this EventV3IO.  # noqa: E501
        :type: str
        """

        self._style = style

    @property
    def severity(self):
        """Gets the severity of this EventV3IO.  # noqa: E501


        :return: The severity of this EventV3IO.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this EventV3IO.


        :param severity: The severity of this EventV3IO.  # noqa: E501
        :type: str
        """
        allowed_values = ["IGNORE", "CREW", "WARNING", "FAULT", "ERROR", "INFO"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"  # noqa: E501
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def flight_id(self):
        """Gets the flight_id of this EventV3IO.  # noqa: E501


        :return: The flight_id of this EventV3IO.  # noqa: E501
        :rtype: str
        """
        return self._flight_id

    @flight_id.setter
    def flight_id(self, flight_id):
        """Sets the flight_id of this EventV3IO.


        :param flight_id: The flight_id of this EventV3IO.  # noqa: E501
        :type: str
        """

        self._flight_id = flight_id

    @property
    def klass(self):
        """Gets the klass of this EventV3IO.  # noqa: E501


        :return: The klass of this EventV3IO.  # noqa: E501
        :rtype: str
        """
        return self._klass

    @klass.setter
    def klass(self, klass):
        """Sets the klass of this EventV3IO.


        :param klass: The klass of this EventV3IO.  # noqa: E501
        :type: str
        """

        self._klass = klass

    @property
    def category(self):
        """Gets the category of this EventV3IO.  # noqa: E501


        :return: The category of this EventV3IO.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this EventV3IO.


        :param category: The category of this EventV3IO.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def data_id(self):
        """Gets the data_id of this EventV3IO.  # noqa: E501


        :return: The data_id of this EventV3IO.  # noqa: E501
        :rtype: str
        """
        return self._data_id

    @data_id.setter
    def data_id(self, data_id):
        """Sets the data_id of this EventV3IO.


        :param data_id: The data_id of this EventV3IO.  # noqa: E501
        :type: str
        """

        self._data_id = data_id

    @property
    def description(self):
        """Gets the description of this EventV3IO.  # noqa: E501


        :return: The description of this EventV3IO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EventV3IO.


        :param description: The description of this EventV3IO.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def dismisser(self):
        """Gets the dismisser of this EventV3IO.  # noqa: E501


        :return: The dismisser of this EventV3IO.  # noqa: E501
        :rtype: str
        """
        return self._dismisser

    @dismisser.setter
    def dismisser(self, dismisser):
        """Sets the dismisser of this EventV3IO.


        :param dismisser: The dismisser of this EventV3IO.  # noqa: E501
        :type: str
        """

        self._dismisser = dismisser

    @property
    def transmission_date(self):
        """Gets the transmission_date of this EventV3IO.  # noqa: E501


        :return: The transmission_date of this EventV3IO.  # noqa: E501
        :rtype: str
        """
        return self._transmission_date

    @transmission_date.setter
    def transmission_date(self, transmission_date):
        """Sets the transmission_date of this EventV3IO.


        :param transmission_date: The transmission_date of this EventV3IO.  # noqa: E501
        :type: str
        """

        self._transmission_date = transmission_date

    @property
    def sum_up(self):
        """Gets the sum_up of this EventV3IO.  # noqa: E501


        :return: The sum_up of this EventV3IO.  # noqa: E501
        :rtype: str
        """
        return self._sum_up

    @sum_up.setter
    def sum_up(self, sum_up):
        """Sets the sum_up of this EventV3IO.


        :param sum_up: The sum_up of this EventV3IO.  # noqa: E501
        :type: str
        """

        self._sum_up = sum_up

    @property
    def ext_url(self):
        """Gets the ext_url of this EventV3IO.  # noqa: E501


        :return: The ext_url of this EventV3IO.  # noqa: E501
        :rtype: str
        """
        return self._ext_url

    @ext_url.setter
    def ext_url(self, ext_url):
        """Sets the ext_url of this EventV3IO.


        :param ext_url: The ext_url of this EventV3IO.  # noqa: E501
        :type: str
        """

        self._ext_url = ext_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventV3IO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
