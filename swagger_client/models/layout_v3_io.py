# coding: utf-8

"""
    WILCO API

    This  API allows you to pull and push data with your WILCO deployment [https://github.com/flightwatching/wilco-api](https://github.com/flightwatching/wilco-api) or on  [www.flightwatching.com](www.flightwatching.com).   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@flightwatching.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

import pprint
import re  # noqa: F401

import six

from swagger_client.models.dashboard_v3_io import DashboardV3IO  # noqa: F401,E501
from swagger_client.models.ext_source import ExtSource  # noqa: F401,E501
from swagger_client.models.iei_v3_io import IeiV3IO  # noqa: F401,E501
from swagger_client.models.ift_v3_io import IftV3IO  # noqa: F401,E501
from swagger_client.models.parameter_v3_io import ParameterV3IO  # noqa: F401,E501


class LayoutV3IO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'report_id': 'str',
        'uplink_template': 'str',
        'ext_source': 'ExtSource',
        'ieis': 'list[IeiV3IO]',
        'layout_fm_ts': 'str',
        'layout_d_bs': 'str',
        'name': 'str',
        'actype': 'str',
        'dashboard_ids': 'list[str]',
        'ifts': 'list[IftV3IO]',
        'dtype': 'str',
        'dashboards': 'list[DashboardV3IO]',
        'can_use_alpha_call_ups': 'bool',
        'engine_type': 'str',
        'params': 'list[ParameterV3IO]'
    }

    attribute_map = {
        'id': 'id',
        'report_id': 'reportId',
        'uplink_template': 'uplinkTemplate',
        'ext_source': 'extSource',
        'ieis': 'ieis',
        'layout_fm_ts': 'layoutFMTs',
        'layout_d_bs': 'layoutDBs',
        'name': 'name',
        'actype': 'actype',
        'dashboard_ids': 'dashboardIds',
        'ifts': 'ifts',
        'dtype': 'dtype',
        'dashboards': 'dashboards',
        'can_use_alpha_call_ups': 'canUseAlphaCallUps',
        'engine_type': 'engineType',
        'params': 'params'
    }

    def __init__(self, id=None, report_id=None, uplink_template=None, ext_source=None, ieis=None, layout_fm_ts=None, layout_d_bs=None, name=None, actype=None, dashboard_ids=None, ifts=None, dtype=None, dashboards=None, can_use_alpha_call_ups=None, engine_type=None, params=None):  # noqa: E501
        """LayoutV3IO - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._report_id = None
        self._uplink_template = None
        self._ext_source = None
        self._ieis = None
        self._layout_fm_ts = None
        self._layout_d_bs = None
        self._name = None
        self._actype = None
        self._dashboard_ids = None
        self._ifts = None
        self._dtype = None
        self._dashboards = None
        self._can_use_alpha_call_ups = None
        self._engine_type = None
        self._params = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if report_id is not None:
            self.report_id = report_id
        if uplink_template is not None:
            self.uplink_template = uplink_template
        if ext_source is not None:
            self.ext_source = ext_source
        if ieis is not None:
            self.ieis = ieis
        if layout_fm_ts is not None:
            self.layout_fm_ts = layout_fm_ts
        if layout_d_bs is not None:
            self.layout_d_bs = layout_d_bs
        if name is not None:
            self.name = name
        if actype is not None:
            self.actype = actype
        if dashboard_ids is not None:
            self.dashboard_ids = dashboard_ids
        if ifts is not None:
            self.ifts = ifts
        if dtype is not None:
            self.dtype = dtype
        if dashboards is not None:
            self.dashboards = dashboards
        if can_use_alpha_call_ups is not None:
            self.can_use_alpha_call_ups = can_use_alpha_call_ups
        if engine_type is not None:
            self.engine_type = engine_type
        if params is not None:
            self.params = params

    @property
    def id(self):
        """Gets the id of this LayoutV3IO.  # noqa: E501


        :return: The id of this LayoutV3IO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LayoutV3IO.


        :param id: The id of this LayoutV3IO.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def report_id(self):
        """Gets the report_id of this LayoutV3IO.  # noqa: E501


        :return: The report_id of this LayoutV3IO.  # noqa: E501
        :rtype: str
        """
        return self._report_id

    @report_id.setter
    def report_id(self, report_id):
        """Sets the report_id of this LayoutV3IO.


        :param report_id: The report_id of this LayoutV3IO.  # noqa: E501
        :type: str
        """

        self._report_id = report_id

    @property
    def uplink_template(self):
        """Gets the uplink_template of this LayoutV3IO.  # noqa: E501


        :return: The uplink_template of this LayoutV3IO.  # noqa: E501
        :rtype: str
        """
        return self._uplink_template

    @uplink_template.setter
    def uplink_template(self, uplink_template):
        """Sets the uplink_template of this LayoutV3IO.


        :param uplink_template: The uplink_template of this LayoutV3IO.  # noqa: E501
        :type: str
        """

        self._uplink_template = uplink_template

    @property
    def ext_source(self):
        """Gets the ext_source of this LayoutV3IO.  # noqa: E501


        :return: The ext_source of this LayoutV3IO.  # noqa: E501
        :rtype: ExtSource
        """
        return self._ext_source

    @ext_source.setter
    def ext_source(self, ext_source):
        """Sets the ext_source of this LayoutV3IO.


        :param ext_source: The ext_source of this LayoutV3IO.  # noqa: E501
        :type: ExtSource
        """

        self._ext_source = ext_source

    @property
    def ieis(self):
        """Gets the ieis of this LayoutV3IO.  # noqa: E501


        :return: The ieis of this LayoutV3IO.  # noqa: E501
        :rtype: list[IeiV3IO]
        """
        return self._ieis

    @ieis.setter
    def ieis(self, ieis):
        """Sets the ieis of this LayoutV3IO.


        :param ieis: The ieis of this LayoutV3IO.  # noqa: E501
        :type: list[IeiV3IO]
        """

        self._ieis = ieis

    @property
    def layout_fm_ts(self):
        """Gets the layout_fm_ts of this LayoutV3IO.  # noqa: E501


        :return: The layout_fm_ts of this LayoutV3IO.  # noqa: E501
        :rtype: str
        """
        return self._layout_fm_ts

    @layout_fm_ts.setter
    def layout_fm_ts(self, layout_fm_ts):
        """Sets the layout_fm_ts of this LayoutV3IO.


        :param layout_fm_ts: The layout_fm_ts of this LayoutV3IO.  # noqa: E501
        :type: str
        """

        self._layout_fm_ts = layout_fm_ts

    @property
    def layout_d_bs(self):
        """Gets the layout_d_bs of this LayoutV3IO.  # noqa: E501


        :return: The layout_d_bs of this LayoutV3IO.  # noqa: E501
        :rtype: str
        """
        return self._layout_d_bs

    @layout_d_bs.setter
    def layout_d_bs(self, layout_d_bs):
        """Sets the layout_d_bs of this LayoutV3IO.


        :param layout_d_bs: The layout_d_bs of this LayoutV3IO.  # noqa: E501
        :type: str
        """

        self._layout_d_bs = layout_d_bs

    @property
    def name(self):
        """Gets the name of this LayoutV3IO.  # noqa: E501


        :return: The name of this LayoutV3IO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LayoutV3IO.


        :param name: The name of this LayoutV3IO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def actype(self):
        """Gets the actype of this LayoutV3IO.  # noqa: E501


        :return: The actype of this LayoutV3IO.  # noqa: E501
        :rtype: str
        """
        return self._actype

    @actype.setter
    def actype(self, actype):
        """Sets the actype of this LayoutV3IO.


        :param actype: The actype of this LayoutV3IO.  # noqa: E501
        :type: str
        """

        self._actype = actype

    @property
    def dashboard_ids(self):
        """Gets the dashboard_ids of this LayoutV3IO.  # noqa: E501


        :return: The dashboard_ids of this LayoutV3IO.  # noqa: E501
        :rtype: list[str]
        """
        return self._dashboard_ids

    @dashboard_ids.setter
    def dashboard_ids(self, dashboard_ids):
        """Sets the dashboard_ids of this LayoutV3IO.


        :param dashboard_ids: The dashboard_ids of this LayoutV3IO.  # noqa: E501
        :type: list[str]
        """

        self._dashboard_ids = dashboard_ids

    @property
    def ifts(self):
        """Gets the ifts of this LayoutV3IO.  # noqa: E501


        :return: The ifts of this LayoutV3IO.  # noqa: E501
        :rtype: list[IftV3IO]
        """
        return self._ifts

    @ifts.setter
    def ifts(self, ifts):
        """Sets the ifts of this LayoutV3IO.


        :param ifts: The ifts of this LayoutV3IO.  # noqa: E501
        :type: list[IftV3IO]
        """

        self._ifts = ifts

    @property
    def dtype(self):
        """Gets the dtype of this LayoutV3IO.  # noqa: E501


        :return: The dtype of this LayoutV3IO.  # noqa: E501
        :rtype: str
        """
        return self._dtype

    @dtype.setter
    def dtype(self, dtype):
        """Sets the dtype of this LayoutV3IO.


        :param dtype: The dtype of this LayoutV3IO.  # noqa: E501
        :type: str
        """

        self._dtype = dtype

    @property
    def dashboards(self):
        """Gets the dashboards of this LayoutV3IO.  # noqa: E501


        :return: The dashboards of this LayoutV3IO.  # noqa: E501
        :rtype: list[DashboardV3IO]
        """
        return self._dashboards

    @dashboards.setter
    def dashboards(self, dashboards):
        """Sets the dashboards of this LayoutV3IO.


        :param dashboards: The dashboards of this LayoutV3IO.  # noqa: E501
        :type: list[DashboardV3IO]
        """

        self._dashboards = dashboards

    @property
    def can_use_alpha_call_ups(self):
        """Gets the can_use_alpha_call_ups of this LayoutV3IO.  # noqa: E501


        :return: The can_use_alpha_call_ups of this LayoutV3IO.  # noqa: E501
        :rtype: bool
        """
        return self._can_use_alpha_call_ups

    @can_use_alpha_call_ups.setter
    def can_use_alpha_call_ups(self, can_use_alpha_call_ups):
        """Sets the can_use_alpha_call_ups of this LayoutV3IO.


        :param can_use_alpha_call_ups: The can_use_alpha_call_ups of this LayoutV3IO.  # noqa: E501
        :type: bool
        """

        self._can_use_alpha_call_ups = can_use_alpha_call_ups

    @property
    def engine_type(self):
        """Gets the engine_type of this LayoutV3IO.  # noqa: E501


        :return: The engine_type of this LayoutV3IO.  # noqa: E501
        :rtype: str
        """
        return self._engine_type

    @engine_type.setter
    def engine_type(self, engine_type):
        """Sets the engine_type of this LayoutV3IO.


        :param engine_type: The engine_type of this LayoutV3IO.  # noqa: E501
        :type: str
        """

        self._engine_type = engine_type

    @property
    def params(self):
        """Gets the params of this LayoutV3IO.  # noqa: E501


        :return: The params of this LayoutV3IO.  # noqa: E501
        :rtype: list[ParameterV3IO]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this LayoutV3IO.


        :param params: The params of this LayoutV3IO.  # noqa: E501
        :type: list[ParameterV3IO]
        """

        self._params = params

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LayoutV3IO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
