# coding: utf-8

"""
    WILCO API

    This  API allows you to pull and push data with your WILCO deployment [https://github.com/flightwatching/wilco-api](https://github.com/flightwatching/wilco-api) or on  [www.flightwatching.com](www.flightwatching.com).   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@flightwatching.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

import pprint
import re  # noqa: F401

import six


class IftV3IO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'variables': 'list[str]',
        'id': 'int',
        'code': 'str',
        'name': 'str',
        'src_id': 'str',
        'language': 'str',
        'ac_familly': 'str',
        'sev': 'str',
        'formula': 'str',
        'skip': 'bool',
        'src_kind': 'str'
    }

    attribute_map = {
        'variables': 'variables',
        'id': 'id',
        'code': 'code',
        'name': 'name',
        'src_id': 'srcId',
        'language': 'language',
        'ac_familly': 'acFamilly',
        'sev': 'sev',
        'formula': 'formula',
        'skip': 'skip',
        'src_kind': 'srcKind'
    }

    def __init__(self, variables=None, id=None, code=None, name=None, src_id=None, language=None, ac_familly=None, sev=None, formula=None, skip=None, src_kind=None):  # noqa: E501
        """IftV3IO - a model defined in Swagger"""  # noqa: E501

        self._variables = None
        self._id = None
        self._code = None
        self._name = None
        self._src_id = None
        self._language = None
        self._ac_familly = None
        self._sev = None
        self._formula = None
        self._skip = None
        self._src_kind = None
        self.discriminator = None

        if variables is not None:
            self.variables = variables
        if id is not None:
            self.id = id
        if code is not None:
            self.code = code
        if name is not None:
            self.name = name
        if src_id is not None:
            self.src_id = src_id
        if language is not None:
            self.language = language
        if ac_familly is not None:
            self.ac_familly = ac_familly
        if sev is not None:
            self.sev = sev
        if formula is not None:
            self.formula = formula
        if skip is not None:
            self.skip = skip
        if src_kind is not None:
            self.src_kind = src_kind

    @property
    def variables(self):
        """Gets the variables of this IftV3IO.  # noqa: E501


        :return: The variables of this IftV3IO.  # noqa: E501
        :rtype: list[str]
        """
        return self._variables

    @variables.setter
    def variables(self, variables):
        """Sets the variables of this IftV3IO.


        :param variables: The variables of this IftV3IO.  # noqa: E501
        :type: list[str]
        """

        self._variables = variables

    @property
    def id(self):
        """Gets the id of this IftV3IO.  # noqa: E501


        :return: The id of this IftV3IO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IftV3IO.


        :param id: The id of this IftV3IO.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def code(self):
        """Gets the code of this IftV3IO.  # noqa: E501


        :return: The code of this IftV3IO.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this IftV3IO.


        :param code: The code of this IftV3IO.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def name(self):
        """Gets the name of this IftV3IO.  # noqa: E501


        :return: The name of this IftV3IO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IftV3IO.


        :param name: The name of this IftV3IO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def src_id(self):
        """Gets the src_id of this IftV3IO.  # noqa: E501


        :return: The src_id of this IftV3IO.  # noqa: E501
        :rtype: str
        """
        return self._src_id

    @src_id.setter
    def src_id(self, src_id):
        """Sets the src_id of this IftV3IO.


        :param src_id: The src_id of this IftV3IO.  # noqa: E501
        :type: str
        """

        self._src_id = src_id

    @property
    def language(self):
        """Gets the language of this IftV3IO.  # noqa: E501


        :return: The language of this IftV3IO.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this IftV3IO.


        :param language: The language of this IftV3IO.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def ac_familly(self):
        """Gets the ac_familly of this IftV3IO.  # noqa: E501


        :return: The ac_familly of this IftV3IO.  # noqa: E501
        :rtype: str
        """
        return self._ac_familly

    @ac_familly.setter
    def ac_familly(self, ac_familly):
        """Sets the ac_familly of this IftV3IO.


        :param ac_familly: The ac_familly of this IftV3IO.  # noqa: E501
        :type: str
        """

        self._ac_familly = ac_familly

    @property
    def sev(self):
        """Gets the sev of this IftV3IO.  # noqa: E501


        :return: The sev of this IftV3IO.  # noqa: E501
        :rtype: str
        """
        return self._sev

    @sev.setter
    def sev(self, sev):
        """Sets the sev of this IftV3IO.


        :param sev: The sev of this IftV3IO.  # noqa: E501
        :type: str
        """
        allowed_values = ["IGNORE", "CREW", "WARNING", "FAULT", "ERROR", "INFO"]  # noqa: E501
        if sev not in allowed_values:
            raise ValueError(
                "Invalid value for `sev` ({0}), must be one of {1}"  # noqa: E501
                .format(sev, allowed_values)
            )

        self._sev = sev

    @property
    def formula(self):
        """Gets the formula of this IftV3IO.  # noqa: E501


        :return: The formula of this IftV3IO.  # noqa: E501
        :rtype: str
        """
        return self._formula

    @formula.setter
    def formula(self, formula):
        """Sets the formula of this IftV3IO.


        :param formula: The formula of this IftV3IO.  # noqa: E501
        :type: str
        """

        self._formula = formula

    @property
    def skip(self):
        """Gets the skip of this IftV3IO.  # noqa: E501


        :return: The skip of this IftV3IO.  # noqa: E501
        :rtype: bool
        """
        return self._skip

    @skip.setter
    def skip(self, skip):
        """Sets the skip of this IftV3IO.


        :param skip: The skip of this IftV3IO.  # noqa: E501
        :type: bool
        """

        self._skip = skip

    @property
    def src_kind(self):
        """Gets the src_kind of this IftV3IO.  # noqa: E501


        :return: The src_kind of this IftV3IO.  # noqa: E501
        :rtype: str
        """
        return self._src_kind

    @src_kind.setter
    def src_kind(self, src_kind):
        """Sets the src_kind of this IftV3IO.


        :param src_kind: The src_kind of this IftV3IO.  # noqa: E501
        :type: str
        """

        self._src_kind = src_kind

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IftV3IO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
