# coding: utf-8

"""
    WILCO API

    This  API allows you to pull and push data with your WILCO deployment [https://github.com/flightwatching/wilco-api](https://github.com/flightwatching/wilco-api) or on  [www.flightwatching.com](www.flightwatching.com).   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@flightwatching.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

import pprint
import re  # noqa: F401

import six


class UserV3IO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'profile': 'str',
        'login': 'str',
        'trigram': 'str',
        'bigdata': 'bool',
        'base': 'str',
        'airline': 'str'
    }

    attribute_map = {
        'profile': 'profile',
        'login': 'login',
        'trigram': 'trigram',
        'bigdata': 'bigdata',
        'base': 'base',
        'airline': 'airline'
    }

    def __init__(self, profile=None, login=None, trigram=None, bigdata=None, base=None, airline=None):  # noqa: E501
        """UserV3IO - a model defined in Swagger"""  # noqa: E501

        self._profile = None
        self._login = None
        self._trigram = None
        self._bigdata = None
        self._base = None
        self._airline = None
        self.discriminator = None

        if profile is not None:
            self.profile = profile
        if login is not None:
            self.login = login
        if trigram is not None:
            self.trigram = trigram
        if bigdata is not None:
            self.bigdata = bigdata
        if base is not None:
            self.base = base
        if airline is not None:
            self.airline = airline

    @property
    def profile(self):
        """Gets the profile of this UserV3IO.  # noqa: E501


        :return: The profile of this UserV3IO.  # noqa: E501
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this UserV3IO.


        :param profile: The profile of this UserV3IO.  # noqa: E501
        :type: str
        """

        self._profile = profile

    @property
    def login(self):
        """Gets the login of this UserV3IO.  # noqa: E501


        :return: The login of this UserV3IO.  # noqa: E501
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this UserV3IO.


        :param login: The login of this UserV3IO.  # noqa: E501
        :type: str
        """

        self._login = login

    @property
    def trigram(self):
        """Gets the trigram of this UserV3IO.  # noqa: E501


        :return: The trigram of this UserV3IO.  # noqa: E501
        :rtype: str
        """
        return self._trigram

    @trigram.setter
    def trigram(self, trigram):
        """Sets the trigram of this UserV3IO.


        :param trigram: The trigram of this UserV3IO.  # noqa: E501
        :type: str
        """

        self._trigram = trigram

    @property
    def bigdata(self):
        """Gets the bigdata of this UserV3IO.  # noqa: E501


        :return: The bigdata of this UserV3IO.  # noqa: E501
        :rtype: bool
        """
        return self._bigdata

    @bigdata.setter
    def bigdata(self, bigdata):
        """Sets the bigdata of this UserV3IO.


        :param bigdata: The bigdata of this UserV3IO.  # noqa: E501
        :type: bool
        """

        self._bigdata = bigdata

    @property
    def base(self):
        """Gets the base of this UserV3IO.  # noqa: E501


        :return: The base of this UserV3IO.  # noqa: E501
        :rtype: str
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this UserV3IO.


        :param base: The base of this UserV3IO.  # noqa: E501
        :type: str
        """

        self._base = base

    @property
    def airline(self):
        """Gets the airline of this UserV3IO.  # noqa: E501


        :return: The airline of this UserV3IO.  # noqa: E501
        :rtype: str
        """
        return self._airline

    @airline.setter
    def airline(self, airline):
        """Sets the airline of this UserV3IO.


        :param airline: The airline of this UserV3IO.  # noqa: E501
        :type: str
        """

        self._airline = airline

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserV3IO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
