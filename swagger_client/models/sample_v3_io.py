# coding: utf-8

"""
    WILCO API

    This  API allows you to pull and push data with your WILCO deployment [https://github.com/flightwatching/wilco-api](https://github.com/flightwatching/wilco-api) or on  [www.flightwatching.com](www.flightwatching.com).   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@flightwatching.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

import pprint
import re  # noqa: F401

import six

from swagger_client.models.event_v3_io import EventV3IO  # noqa: F401,E501
from swagger_client.models.fwot_v3_io import FwotV3IO  # noqa: F401,E501


class SampleV3IO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'fwot': 'FwotV3IO',
        'msg': 'EventV3IO',
        'date': 'str',
        'name': 'str',
        'value': 'str',
        'max_scale': 'float',
        'timelabel': 'str',
        'msg_id': 'int',
        'min_scale': 'float',
        'min_ok': 'float',
        'max_ok': 'float',
        'id': 'int',
        'param_id': 'int',
        'state': 'str'
    }

    attribute_map = {
        'type': 'type',
        'fwot': 'fwot',
        'msg': 'msg',
        'date': 'date',
        'name': 'name',
        'value': 'value',
        'max_scale': 'maxScale',
        'timelabel': 'timelabel',
        'msg_id': 'msgId',
        'min_scale': 'minScale',
        'min_ok': 'minOK',
        'max_ok': 'maxOK',
        'id': 'id',
        'param_id': 'paramId',
        'state': 'state'
    }

    def __init__(self, type=None, fwot=None, msg=None, date=None, name=None, value=None, max_scale=None, timelabel=None, msg_id=None, min_scale=None, min_ok=None, max_ok=None, id=None, param_id=None, state=None):  # noqa: E501
        """SampleV3IO - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._fwot = None
        self._msg = None
        self._date = None
        self._name = None
        self._value = None
        self._max_scale = None
        self._timelabel = None
        self._msg_id = None
        self._min_scale = None
        self._min_ok = None
        self._max_ok = None
        self._id = None
        self._param_id = None
        self._state = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if fwot is not None:
            self.fwot = fwot
        if msg is not None:
            self.msg = msg
        if date is not None:
            self.date = date
        if name is not None:
            self.name = name
        if value is not None:
            self.value = value
        if max_scale is not None:
            self.max_scale = max_scale
        if timelabel is not None:
            self.timelabel = timelabel
        if msg_id is not None:
            self.msg_id = msg_id
        if min_scale is not None:
            self.min_scale = min_scale
        if min_ok is not None:
            self.min_ok = min_ok
        if max_ok is not None:
            self.max_ok = max_ok
        if id is not None:
            self.id = id
        if param_id is not None:
            self.param_id = param_id
        if state is not None:
            self.state = state

    @property
    def type(self):
        """Gets the type of this SampleV3IO.  # noqa: E501


        :return: The type of this SampleV3IO.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SampleV3IO.


        :param type: The type of this SampleV3IO.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def fwot(self):
        """Gets the fwot of this SampleV3IO.  # noqa: E501


        :return: The fwot of this SampleV3IO.  # noqa: E501
        :rtype: FwotV3IO
        """
        return self._fwot

    @fwot.setter
    def fwot(self, fwot):
        """Sets the fwot of this SampleV3IO.


        :param fwot: The fwot of this SampleV3IO.  # noqa: E501
        :type: FwotV3IO
        """

        self._fwot = fwot

    @property
    def msg(self):
        """Gets the msg of this SampleV3IO.  # noqa: E501


        :return: The msg of this SampleV3IO.  # noqa: E501
        :rtype: EventV3IO
        """
        return self._msg

    @msg.setter
    def msg(self, msg):
        """Sets the msg of this SampleV3IO.


        :param msg: The msg of this SampleV3IO.  # noqa: E501
        :type: EventV3IO
        """

        self._msg = msg

    @property
    def date(self):
        """Gets the date of this SampleV3IO.  # noqa: E501


        :return: The date of this SampleV3IO.  # noqa: E501
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this SampleV3IO.


        :param date: The date of this SampleV3IO.  # noqa: E501
        :type: str
        """

        self._date = date

    @property
    def name(self):
        """Gets the name of this SampleV3IO.  # noqa: E501


        :return: The name of this SampleV3IO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SampleV3IO.


        :param name: The name of this SampleV3IO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def value(self):
        """Gets the value of this SampleV3IO.  # noqa: E501


        :return: The value of this SampleV3IO.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SampleV3IO.


        :param value: The value of this SampleV3IO.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def max_scale(self):
        """Gets the max_scale of this SampleV3IO.  # noqa: E501


        :return: The max_scale of this SampleV3IO.  # noqa: E501
        :rtype: float
        """
        return self._max_scale

    @max_scale.setter
    def max_scale(self, max_scale):
        """Sets the max_scale of this SampleV3IO.


        :param max_scale: The max_scale of this SampleV3IO.  # noqa: E501
        :type: float
        """

        self._max_scale = max_scale

    @property
    def timelabel(self):
        """Gets the timelabel of this SampleV3IO.  # noqa: E501


        :return: The timelabel of this SampleV3IO.  # noqa: E501
        :rtype: str
        """
        return self._timelabel

    @timelabel.setter
    def timelabel(self, timelabel):
        """Sets the timelabel of this SampleV3IO.


        :param timelabel: The timelabel of this SampleV3IO.  # noqa: E501
        :type: str
        """

        self._timelabel = timelabel

    @property
    def msg_id(self):
        """Gets the msg_id of this SampleV3IO.  # noqa: E501


        :return: The msg_id of this SampleV3IO.  # noqa: E501
        :rtype: int
        """
        return self._msg_id

    @msg_id.setter
    def msg_id(self, msg_id):
        """Sets the msg_id of this SampleV3IO.


        :param msg_id: The msg_id of this SampleV3IO.  # noqa: E501
        :type: int
        """

        self._msg_id = msg_id

    @property
    def min_scale(self):
        """Gets the min_scale of this SampleV3IO.  # noqa: E501


        :return: The min_scale of this SampleV3IO.  # noqa: E501
        :rtype: float
        """
        return self._min_scale

    @min_scale.setter
    def min_scale(self, min_scale):
        """Sets the min_scale of this SampleV3IO.


        :param min_scale: The min_scale of this SampleV3IO.  # noqa: E501
        :type: float
        """

        self._min_scale = min_scale

    @property
    def min_ok(self):
        """Gets the min_ok of this SampleV3IO.  # noqa: E501


        :return: The min_ok of this SampleV3IO.  # noqa: E501
        :rtype: float
        """
        return self._min_ok

    @min_ok.setter
    def min_ok(self, min_ok):
        """Sets the min_ok of this SampleV3IO.


        :param min_ok: The min_ok of this SampleV3IO.  # noqa: E501
        :type: float
        """

        self._min_ok = min_ok

    @property
    def max_ok(self):
        """Gets the max_ok of this SampleV3IO.  # noqa: E501


        :return: The max_ok of this SampleV3IO.  # noqa: E501
        :rtype: float
        """
        return self._max_ok

    @max_ok.setter
    def max_ok(self, max_ok):
        """Sets the max_ok of this SampleV3IO.


        :param max_ok: The max_ok of this SampleV3IO.  # noqa: E501
        :type: float
        """

        self._max_ok = max_ok

    @property
    def id(self):
        """Gets the id of this SampleV3IO.  # noqa: E501


        :return: The id of this SampleV3IO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SampleV3IO.


        :param id: The id of this SampleV3IO.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def param_id(self):
        """Gets the param_id of this SampleV3IO.  # noqa: E501


        :return: The param_id of this SampleV3IO.  # noqa: E501
        :rtype: int
        """
        return self._param_id

    @param_id.setter
    def param_id(self, param_id):
        """Sets the param_id of this SampleV3IO.


        :param param_id: The param_id of this SampleV3IO.  # noqa: E501
        :type: int
        """

        self._param_id = param_id

    @property
    def state(self):
        """Gets the state of this SampleV3IO.  # noqa: E501


        :return: The state of this SampleV3IO.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SampleV3IO.


        :param state: The state of this SampleV3IO.  # noqa: E501
        :type: str
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SampleV3IO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
