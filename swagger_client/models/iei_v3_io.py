# coding: utf-8

"""
    WILCO API

    This  API allows you to pull and push data with your WILCO deployment [https://github.com/flightwatching/wilco-api](https://github.com/flightwatching/wilco-api) or on  [www.flightwatching.com](www.flightwatching.com).   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@flightwatching.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

import pprint
import re  # noqa: F401

import six

from swagger_client.models.iei_param_v3_io import IeiParamV3IO  # noqa: F401,E501


class IeiV3IO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'idx_max': 'int',
        'time_offset_formula': 'str',
        'time_label': 'str',
        'idx_min': 'int',
        'length': 'int',
        'param': 'list[IeiParamV3IO]',
        'is_header': 'bool'
    }

    attribute_map = {
        'code': 'code',
        'idx_max': 'idxMax',
        'time_offset_formula': 'timeOffsetFormula',
        'time_label': 'timeLabel',
        'idx_min': 'idxMin',
        'length': 'length',
        'param': 'param',
        'is_header': 'isHeader'
    }

    def __init__(self, code=None, idx_max=None, time_offset_formula=None, time_label=None, idx_min=None, length=None, param=None, is_header=None):  # noqa: E501
        """IeiV3IO - a model defined in Swagger"""  # noqa: E501

        self._code = None
        self._idx_max = None
        self._time_offset_formula = None
        self._time_label = None
        self._idx_min = None
        self._length = None
        self._param = None
        self._is_header = None
        self.discriminator = None

        if code is not None:
            self.code = code
        if idx_max is not None:
            self.idx_max = idx_max
        if time_offset_formula is not None:
            self.time_offset_formula = time_offset_formula
        if time_label is not None:
            self.time_label = time_label
        if idx_min is not None:
            self.idx_min = idx_min
        if length is not None:
            self.length = length
        if param is not None:
            self.param = param
        if is_header is not None:
            self.is_header = is_header

    @property
    def code(self):
        """Gets the code of this IeiV3IO.  # noqa: E501


        :return: The code of this IeiV3IO.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this IeiV3IO.


        :param code: The code of this IeiV3IO.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def idx_max(self):
        """Gets the idx_max of this IeiV3IO.  # noqa: E501


        :return: The idx_max of this IeiV3IO.  # noqa: E501
        :rtype: int
        """
        return self._idx_max

    @idx_max.setter
    def idx_max(self, idx_max):
        """Sets the idx_max of this IeiV3IO.


        :param idx_max: The idx_max of this IeiV3IO.  # noqa: E501
        :type: int
        """

        self._idx_max = idx_max

    @property
    def time_offset_formula(self):
        """Gets the time_offset_formula of this IeiV3IO.  # noqa: E501


        :return: The time_offset_formula of this IeiV3IO.  # noqa: E501
        :rtype: str
        """
        return self._time_offset_formula

    @time_offset_formula.setter
    def time_offset_formula(self, time_offset_formula):
        """Sets the time_offset_formula of this IeiV3IO.


        :param time_offset_formula: The time_offset_formula of this IeiV3IO.  # noqa: E501
        :type: str
        """

        self._time_offset_formula = time_offset_formula

    @property
    def time_label(self):
        """Gets the time_label of this IeiV3IO.  # noqa: E501


        :return: The time_label of this IeiV3IO.  # noqa: E501
        :rtype: str
        """
        return self._time_label

    @time_label.setter
    def time_label(self, time_label):
        """Sets the time_label of this IeiV3IO.


        :param time_label: The time_label of this IeiV3IO.  # noqa: E501
        :type: str
        """

        self._time_label = time_label

    @property
    def idx_min(self):
        """Gets the idx_min of this IeiV3IO.  # noqa: E501


        :return: The idx_min of this IeiV3IO.  # noqa: E501
        :rtype: int
        """
        return self._idx_min

    @idx_min.setter
    def idx_min(self, idx_min):
        """Sets the idx_min of this IeiV3IO.


        :param idx_min: The idx_min of this IeiV3IO.  # noqa: E501
        :type: int
        """

        self._idx_min = idx_min

    @property
    def length(self):
        """Gets the length of this IeiV3IO.  # noqa: E501


        :return: The length of this IeiV3IO.  # noqa: E501
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this IeiV3IO.


        :param length: The length of this IeiV3IO.  # noqa: E501
        :type: int
        """

        self._length = length

    @property
    def param(self):
        """Gets the param of this IeiV3IO.  # noqa: E501


        :return: The param of this IeiV3IO.  # noqa: E501
        :rtype: list[IeiParamV3IO]
        """
        return self._param

    @param.setter
    def param(self, param):
        """Sets the param of this IeiV3IO.


        :param param: The param of this IeiV3IO.  # noqa: E501
        :type: list[IeiParamV3IO]
        """

        self._param = param

    @property
    def is_header(self):
        """Gets the is_header of this IeiV3IO.  # noqa: E501


        :return: The is_header of this IeiV3IO.  # noqa: E501
        :rtype: bool
        """
        return self._is_header

    @is_header.setter
    def is_header(self, is_header):
        """Sets the is_header of this IeiV3IO.


        :param is_header: The is_header of this IeiV3IO.  # noqa: E501
        :type: bool
        """

        self._is_header = is_header

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IeiV3IO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
