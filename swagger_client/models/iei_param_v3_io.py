# coding: utf-8

"""
    WILCO API

    This  API allows you to pull and push data with your WILCO deployment [https://github.com/flightwatching/wilco-api](https://github.com/flightwatching/wilco-api) or on  [www.flightwatching.com](www.flightwatching.com).   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@flightwatching.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

import pprint
import re  # noqa: F401

import six

from swagger_client.models.parameter_v3_io import ParameterV3IO  # noqa: F401,E501


class IeiParamV3IO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sample_value': 'str',
        'param': 'ParameterV3IO',
        'offset': 'int',
        'date_param': 'str',
        'conversion': 'float',
        'date_pattern': 'str',
        'idx': 'int',
        'formula': 'str',
        'is_number': 'bool',
        'length': 'int'
    }

    attribute_map = {
        'sample_value': 'sampleValue',
        'param': 'param',
        'offset': 'offset',
        'date_param': 'dateParam',
        'conversion': 'conversion',
        'date_pattern': 'datePattern',
        'idx': 'idx',
        'formula': 'formula',
        'is_number': 'isNumber',
        'length': 'length'
    }

    def __init__(self, sample_value=None, param=None, offset=None, date_param=None, conversion=None, date_pattern=None, idx=None, formula=None, is_number=None, length=None):  # noqa: E501
        """IeiParamV3IO - a model defined in Swagger"""  # noqa: E501

        self._sample_value = None
        self._param = None
        self._offset = None
        self._date_param = None
        self._conversion = None
        self._date_pattern = None
        self._idx = None
        self._formula = None
        self._is_number = None
        self._length = None
        self.discriminator = None

        if sample_value is not None:
            self.sample_value = sample_value
        if param is not None:
            self.param = param
        if offset is not None:
            self.offset = offset
        if date_param is not None:
            self.date_param = date_param
        if conversion is not None:
            self.conversion = conversion
        if date_pattern is not None:
            self.date_pattern = date_pattern
        if idx is not None:
            self.idx = idx
        if formula is not None:
            self.formula = formula
        if is_number is not None:
            self.is_number = is_number
        if length is not None:
            self.length = length

    @property
    def sample_value(self):
        """Gets the sample_value of this IeiParamV3IO.  # noqa: E501


        :return: The sample_value of this IeiParamV3IO.  # noqa: E501
        :rtype: str
        """
        return self._sample_value

    @sample_value.setter
    def sample_value(self, sample_value):
        """Sets the sample_value of this IeiParamV3IO.


        :param sample_value: The sample_value of this IeiParamV3IO.  # noqa: E501
        :type: str
        """

        self._sample_value = sample_value

    @property
    def param(self):
        """Gets the param of this IeiParamV3IO.  # noqa: E501


        :return: The param of this IeiParamV3IO.  # noqa: E501
        :rtype: ParameterV3IO
        """
        return self._param

    @param.setter
    def param(self, param):
        """Sets the param of this IeiParamV3IO.


        :param param: The param of this IeiParamV3IO.  # noqa: E501
        :type: ParameterV3IO
        """

        self._param = param

    @property
    def offset(self):
        """Gets the offset of this IeiParamV3IO.  # noqa: E501


        :return: The offset of this IeiParamV3IO.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this IeiParamV3IO.


        :param offset: The offset of this IeiParamV3IO.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def date_param(self):
        """Gets the date_param of this IeiParamV3IO.  # noqa: E501


        :return: The date_param of this IeiParamV3IO.  # noqa: E501
        :rtype: str
        """
        return self._date_param

    @date_param.setter
    def date_param(self, date_param):
        """Sets the date_param of this IeiParamV3IO.


        :param date_param: The date_param of this IeiParamV3IO.  # noqa: E501
        :type: str
        """

        self._date_param = date_param

    @property
    def conversion(self):
        """Gets the conversion of this IeiParamV3IO.  # noqa: E501


        :return: The conversion of this IeiParamV3IO.  # noqa: E501
        :rtype: float
        """
        return self._conversion

    @conversion.setter
    def conversion(self, conversion):
        """Sets the conversion of this IeiParamV3IO.


        :param conversion: The conversion of this IeiParamV3IO.  # noqa: E501
        :type: float
        """

        self._conversion = conversion

    @property
    def date_pattern(self):
        """Gets the date_pattern of this IeiParamV3IO.  # noqa: E501


        :return: The date_pattern of this IeiParamV3IO.  # noqa: E501
        :rtype: str
        """
        return self._date_pattern

    @date_pattern.setter
    def date_pattern(self, date_pattern):
        """Sets the date_pattern of this IeiParamV3IO.


        :param date_pattern: The date_pattern of this IeiParamV3IO.  # noqa: E501
        :type: str
        """

        self._date_pattern = date_pattern

    @property
    def idx(self):
        """Gets the idx of this IeiParamV3IO.  # noqa: E501


        :return: The idx of this IeiParamV3IO.  # noqa: E501
        :rtype: int
        """
        return self._idx

    @idx.setter
    def idx(self, idx):
        """Sets the idx of this IeiParamV3IO.


        :param idx: The idx of this IeiParamV3IO.  # noqa: E501
        :type: int
        """

        self._idx = idx

    @property
    def formula(self):
        """Gets the formula of this IeiParamV3IO.  # noqa: E501


        :return: The formula of this IeiParamV3IO.  # noqa: E501
        :rtype: str
        """
        return self._formula

    @formula.setter
    def formula(self, formula):
        """Sets the formula of this IeiParamV3IO.


        :param formula: The formula of this IeiParamV3IO.  # noqa: E501
        :type: str
        """

        self._formula = formula

    @property
    def is_number(self):
        """Gets the is_number of this IeiParamV3IO.  # noqa: E501


        :return: The is_number of this IeiParamV3IO.  # noqa: E501
        :rtype: bool
        """
        return self._is_number

    @is_number.setter
    def is_number(self, is_number):
        """Sets the is_number of this IeiParamV3IO.


        :param is_number: The is_number of this IeiParamV3IO.  # noqa: E501
        :type: bool
        """

        self._is_number = is_number

    @property
    def length(self):
        """Gets the length of this IeiParamV3IO.  # noqa: E501


        :return: The length of this IeiParamV3IO.  # noqa: E501
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this IeiParamV3IO.


        :param length: The length of this IeiParamV3IO.  # noqa: E501
        :type: int
        """

        self._length = length

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IeiParamV3IO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
