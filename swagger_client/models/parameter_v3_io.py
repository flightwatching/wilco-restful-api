# coding: utf-8

"""
    WILCO API

    This  API allows you to pull and push data with your WILCO deployment [https://github.com/flightwatching/wilco-api](https://github.com/flightwatching/wilco-api) or on  [www.flightwatching.com](www.flightwatching.com).   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@flightwatching.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

import pprint
import re  # noqa: F401

import six

from swagger_client.models.ift_v3_io import IftV3IO  # noqa: F401,E501


class ParameterV3IO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_scale': 'float',
        'max_ok': 'float',
        'min_scale': 'float',
        'actype_name': 'str',
        'address': 'str',
        'min_ok': 'float',
        'type': 'str',
        'ifts': 'list[IftV3IO]',
        'description': 'str',
        'name': 'str',
        'id': 'int',
        'is_key': 'bool'
    }

    attribute_map = {
        'max_scale': 'maxScale',
        'max_ok': 'maxOK',
        'min_scale': 'minScale',
        'actype_name': 'actypeName',
        'address': 'address',
        'min_ok': 'minOK',
        'type': 'type',
        'ifts': 'ifts',
        'description': 'description',
        'name': 'name',
        'id': 'id',
        'is_key': 'isKey'
    }

    def __init__(self, max_scale=None, max_ok=None, min_scale=None, actype_name=None, address=None, min_ok=None, type=None, ifts=None, description=None, name=None, id=None, is_key=None):  # noqa: E501
        """ParameterV3IO - a model defined in Swagger"""  # noqa: E501

        self._max_scale = None
        self._max_ok = None
        self._min_scale = None
        self._actype_name = None
        self._address = None
        self._min_ok = None
        self._type = None
        self._ifts = None
        self._description = None
        self._name = None
        self._id = None
        self._is_key = None
        self.discriminator = None

        if max_scale is not None:
            self.max_scale = max_scale
        if max_ok is not None:
            self.max_ok = max_ok
        if min_scale is not None:
            self.min_scale = min_scale
        if actype_name is not None:
            self.actype_name = actype_name
        if address is not None:
            self.address = address
        if min_ok is not None:
            self.min_ok = min_ok
        if type is not None:
            self.type = type
        if ifts is not None:
            self.ifts = ifts
        if description is not None:
            self.description = description
        if name is not None:
            self.name = name
        if id is not None:
            self.id = id
        if is_key is not None:
            self.is_key = is_key

    @property
    def max_scale(self):
        """Gets the max_scale of this ParameterV3IO.  # noqa: E501


        :return: The max_scale of this ParameterV3IO.  # noqa: E501
        :rtype: float
        """
        return self._max_scale

    @max_scale.setter
    def max_scale(self, max_scale):
        """Sets the max_scale of this ParameterV3IO.


        :param max_scale: The max_scale of this ParameterV3IO.  # noqa: E501
        :type: float
        """

        self._max_scale = max_scale

    @property
    def max_ok(self):
        """Gets the max_ok of this ParameterV3IO.  # noqa: E501


        :return: The max_ok of this ParameterV3IO.  # noqa: E501
        :rtype: float
        """
        return self._max_ok

    @max_ok.setter
    def max_ok(self, max_ok):
        """Sets the max_ok of this ParameterV3IO.


        :param max_ok: The max_ok of this ParameterV3IO.  # noqa: E501
        :type: float
        """

        self._max_ok = max_ok

    @property
    def min_scale(self):
        """Gets the min_scale of this ParameterV3IO.  # noqa: E501


        :return: The min_scale of this ParameterV3IO.  # noqa: E501
        :rtype: float
        """
        return self._min_scale

    @min_scale.setter
    def min_scale(self, min_scale):
        """Sets the min_scale of this ParameterV3IO.


        :param min_scale: The min_scale of this ParameterV3IO.  # noqa: E501
        :type: float
        """

        self._min_scale = min_scale

    @property
    def actype_name(self):
        """Gets the actype_name of this ParameterV3IO.  # noqa: E501


        :return: The actype_name of this ParameterV3IO.  # noqa: E501
        :rtype: str
        """
        return self._actype_name

    @actype_name.setter
    def actype_name(self, actype_name):
        """Sets the actype_name of this ParameterV3IO.


        :param actype_name: The actype_name of this ParameterV3IO.  # noqa: E501
        :type: str
        """

        self._actype_name = actype_name

    @property
    def address(self):
        """Gets the address of this ParameterV3IO.  # noqa: E501


        :return: The address of this ParameterV3IO.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ParameterV3IO.


        :param address: The address of this ParameterV3IO.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def min_ok(self):
        """Gets the min_ok of this ParameterV3IO.  # noqa: E501


        :return: The min_ok of this ParameterV3IO.  # noqa: E501
        :rtype: float
        """
        return self._min_ok

    @min_ok.setter
    def min_ok(self, min_ok):
        """Sets the min_ok of this ParameterV3IO.


        :param min_ok: The min_ok of this ParameterV3IO.  # noqa: E501
        :type: float
        """

        self._min_ok = min_ok

    @property
    def type(self):
        """Gets the type of this ParameterV3IO.  # noqa: E501


        :return: The type of this ParameterV3IO.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ParameterV3IO.


        :param type: The type of this ParameterV3IO.  # noqa: E501
        :type: str
        """
        allowed_values = ["TEXT", "NUMBER", "JSON"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def ifts(self):
        """Gets the ifts of this ParameterV3IO.  # noqa: E501


        :return: The ifts of this ParameterV3IO.  # noqa: E501
        :rtype: list[IftV3IO]
        """
        return self._ifts

    @ifts.setter
    def ifts(self, ifts):
        """Sets the ifts of this ParameterV3IO.


        :param ifts: The ifts of this ParameterV3IO.  # noqa: E501
        :type: list[IftV3IO]
        """

        self._ifts = ifts

    @property
    def description(self):
        """Gets the description of this ParameterV3IO.  # noqa: E501


        :return: The description of this ParameterV3IO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ParameterV3IO.


        :param description: The description of this ParameterV3IO.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this ParameterV3IO.  # noqa: E501


        :return: The name of this ParameterV3IO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ParameterV3IO.


        :param name: The name of this ParameterV3IO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def id(self):
        """Gets the id of this ParameterV3IO.  # noqa: E501


        :return: The id of this ParameterV3IO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ParameterV3IO.


        :param id: The id of this ParameterV3IO.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_key(self):
        """Gets the is_key of this ParameterV3IO.  # noqa: E501


        :return: The is_key of this ParameterV3IO.  # noqa: E501
        :rtype: bool
        """
        return self._is_key

    @is_key.setter
    def is_key(self, is_key):
        """Sets the is_key of this ParameterV3IO.


        :param is_key: The is_key of this ParameterV3IO.  # noqa: E501
        :type: bool
        """

        self._is_key = is_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ParameterV3IO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
