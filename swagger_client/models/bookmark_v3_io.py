# coding: utf-8

"""
    WILCO API

    This  API allows you to pull and push data with your WILCO deployment [https://github.com/flightwatching/wilco-api](https://github.com/flightwatching/wilco-api) or on  [www.flightwatching.com](www.flightwatching.com).   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@flightwatching.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

import pprint
import re  # noqa: F401

import six


class BookmarkV3IO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'disabled': 'bool',
        'customer': 'str',
        'href': 'str',
        'rank': 'str',
        'photo_url': 'str',
        'tooltip': 'str',
        'landing_page': 'bool',
        'glyphicon': 'str',
        'text': 'str'
    }

    attribute_map = {
        'disabled': 'disabled',
        'customer': 'customer',
        'href': 'href',
        'rank': 'rank',
        'photo_url': 'photoUrl',
        'tooltip': 'tooltip',
        'landing_page': 'landingPage',
        'glyphicon': 'glyphicon',
        'text': 'text'
    }

    def __init__(self, disabled=None, customer=None, href=None, rank=None, photo_url=None, tooltip=None, landing_page=None, glyphicon=None, text=None):  # noqa: E501
        """BookmarkV3IO - a model defined in Swagger"""  # noqa: E501

        self._disabled = None
        self._customer = None
        self._href = None
        self._rank = None
        self._photo_url = None
        self._tooltip = None
        self._landing_page = None
        self._glyphicon = None
        self._text = None
        self.discriminator = None

        if disabled is not None:
            self.disabled = disabled
        if customer is not None:
            self.customer = customer
        if href is not None:
            self.href = href
        if rank is not None:
            self.rank = rank
        if photo_url is not None:
            self.photo_url = photo_url
        if tooltip is not None:
            self.tooltip = tooltip
        if landing_page is not None:
            self.landing_page = landing_page
        if glyphicon is not None:
            self.glyphicon = glyphicon
        if text is not None:
            self.text = text

    @property
    def disabled(self):
        """Gets the disabled of this BookmarkV3IO.  # noqa: E501


        :return: The disabled of this BookmarkV3IO.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this BookmarkV3IO.


        :param disabled: The disabled of this BookmarkV3IO.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def customer(self):
        """Gets the customer of this BookmarkV3IO.  # noqa: E501


        :return: The customer of this BookmarkV3IO.  # noqa: E501
        :rtype: str
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this BookmarkV3IO.


        :param customer: The customer of this BookmarkV3IO.  # noqa: E501
        :type: str
        """

        self._customer = customer

    @property
    def href(self):
        """Gets the href of this BookmarkV3IO.  # noqa: E501


        :return: The href of this BookmarkV3IO.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this BookmarkV3IO.


        :param href: The href of this BookmarkV3IO.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def rank(self):
        """Gets the rank of this BookmarkV3IO.  # noqa: E501


        :return: The rank of this BookmarkV3IO.  # noqa: E501
        :rtype: str
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this BookmarkV3IO.


        :param rank: The rank of this BookmarkV3IO.  # noqa: E501
        :type: str
        """

        self._rank = rank

    @property
    def photo_url(self):
        """Gets the photo_url of this BookmarkV3IO.  # noqa: E501


        :return: The photo_url of this BookmarkV3IO.  # noqa: E501
        :rtype: str
        """
        return self._photo_url

    @photo_url.setter
    def photo_url(self, photo_url):
        """Sets the photo_url of this BookmarkV3IO.


        :param photo_url: The photo_url of this BookmarkV3IO.  # noqa: E501
        :type: str
        """

        self._photo_url = photo_url

    @property
    def tooltip(self):
        """Gets the tooltip of this BookmarkV3IO.  # noqa: E501


        :return: The tooltip of this BookmarkV3IO.  # noqa: E501
        :rtype: str
        """
        return self._tooltip

    @tooltip.setter
    def tooltip(self, tooltip):
        """Sets the tooltip of this BookmarkV3IO.


        :param tooltip: The tooltip of this BookmarkV3IO.  # noqa: E501
        :type: str
        """

        self._tooltip = tooltip

    @property
    def landing_page(self):
        """Gets the landing_page of this BookmarkV3IO.  # noqa: E501


        :return: The landing_page of this BookmarkV3IO.  # noqa: E501
        :rtype: bool
        """
        return self._landing_page

    @landing_page.setter
    def landing_page(self, landing_page):
        """Sets the landing_page of this BookmarkV3IO.


        :param landing_page: The landing_page of this BookmarkV3IO.  # noqa: E501
        :type: bool
        """

        self._landing_page = landing_page

    @property
    def glyphicon(self):
        """Gets the glyphicon of this BookmarkV3IO.  # noqa: E501


        :return: The glyphicon of this BookmarkV3IO.  # noqa: E501
        :rtype: str
        """
        return self._glyphicon

    @glyphicon.setter
    def glyphicon(self, glyphicon):
        """Sets the glyphicon of this BookmarkV3IO.


        :param glyphicon: The glyphicon of this BookmarkV3IO.  # noqa: E501
        :type: str
        """

        self._glyphicon = glyphicon

    @property
    def text(self):
        """Gets the text of this BookmarkV3IO.  # noqa: E501


        :return: The text of this BookmarkV3IO.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this BookmarkV3IO.


        :param text: The text of this BookmarkV3IO.  # noqa: E501
        :type: str
        """

        self._text = text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BookmarkV3IO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
